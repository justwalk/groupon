/*
 * Copyright (c) 2011 by Chances.
 * $CVSHeader$
 * $Author$
 * $Date$
 * $Revision$
 */
package sitv.epg.data;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.Console;
import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.Date;
import java.text.SimpleDateFormat;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;

import org.apache.jasper.tagplugins.jstl.core.Out;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;





import sitv.epg.business.EpgLogFactory;
import sitv.epg.business.dao.BookmarkService;
import sitv.epg.business.dao.CategoryItemService;
import sitv.epg.business.dao.CollectionService;
import sitv.epg.business.dao.DZDP_AddressService;
import sitv.epg.business.dao.DZDP_CategoryService;
import sitv.epg.business.dao.DZDP_CommentService;
import sitv.epg.business.dao.DZDP_UserService;
import sitv.epg.business.dao.EpisodeService;
import sitv.epg.business.dao.PlayerService;
import sitv.epg.business.dao.ProgramService;
import sitv.epg.business.dao.SeriesmarkService;
import sitv.epg.zhangjiagang.service.AuthenticateService;
import sitv.epg.nav.controller.AbstractController;
import sitv.epg.web.context.EpgHelper;
import sun.misc.BASE64Encoder;

/**
 * Class comments.
 *
 * @author <a href="mailto:libf@chances.com.cn">libf</a>
 */
@Controller
public class DataAccessController extends AbstractController {
	private static final String SUCCESS = "/common/data";
	String JSONResult = new String();
	String addCollctionJSONResult = new String();
	
	private static Logger logger = Logger.getLogger("bi");
	
	@Autowired
	private CategoryItemService categoryItemService;
	
	@Autowired
	private CollectionService collectionService;
	
	@Autowired
	private EpisodeService episodeService; 
	
	@Autowired
	private ProgramService programService;
	
	@Autowired
	private PlayerService playerService;
	
	@Autowired
	private BookmarkService bookmarkService;
	
	@Autowired
	private AuthenticateService aaaService;
	
	@Autowired
	private SeriesmarkService seriesmarkService;
	
	
	@Autowired
	private DZDP_CommentService dzdp_CommentService;
	@Autowired
	private DZDP_AddressService dzdp_AddressService;
	@Autowired
	private DZDP_CategoryService dzdp_CategoryService;
	@Autowired
	private DZDP_UserService dzdp_UserService;

	/**
	 * 处理url.
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/clientUrlHandler", method = RequestMethod.GET)
	public String clientUrlHandler(@RequestParam(value="url", required=true) String urlStr,
			ModelMap model, HttpServletRequest request) {
		try {
			request.setCharacterEncoding("UTF-8");
			//获取唯一标识
	        //String[] macInfo = EpgHelper.getHeaders(request);
	        //String mac=macInfo[2];
			String mac= request.getSession().getAttribute("mac").toString();
			urlStr = new String(urlStr.getBytes("iso-8859-1"),"utf-8");
			urlStr=urlStr.replace("deciveId", mac);
			java.net.URL url = new java.net.URL(urlStr);
			java.net.URLConnection connection = url.openConnection();
		    connection.setDoOutput(true);  
		    java.io.OutputStreamWriter outs = new java.io.OutputStreamWriter(connection.getOutputStream(), "UTF-8");
		    outs.flush();  
		    outs.close(); 
		    String sCurrentLine;  
		    sCurrentLine = "";  
		    String sTotalString = "";
		    java.io.InputStream l_urlStream;  
		    l_urlStream = connection.getInputStream();  
		    java.io.BufferedReader l_reader = new java.io.BufferedReader(new java.io.InputStreamReader(l_urlStream, "UTF-8"));  
		    while ((sCurrentLine = l_reader.readLine()) != null) {  
		        sTotalString += sCurrentLine;  
		    }
		    model.addAttribute("data",sTotalString.replace("\\n", "<br>"));
		    //记录bi日志
		    //bi日志类型 1(page), 2(func), 3(item)
			String biType=request.getParameter("biType");
			String pageId=request.getParameter("pageId");
			String itemId=request.getParameter("itemId");
			String itemType=request.getParameter("itemType");
			String funcId=request.getParameter("funcId");
			String funcContent=request.getParameter("funcContent");
			if(funcId==null){
				funcId="";
			}
			if(funcContent==null){
				funcContent="";
			}
			writeBi(biType, pageId, funcId, funcContent, mac, itemId, itemType, urlStr);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return SUCCESS;
	}
	/**
	 * 保存设置信息.
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/saveSetting", method = RequestMethod.GET)
	public String saveSetting(@RequestParam(value="id", required=true) String id,
			@RequestParam(value="name", required=true) String name,
			@RequestParam(value="phone", required=true) String phone,
			@RequestParam(value="mac", required=true) String mac,
			@RequestParam(value="host", required=true) String host,
			ModelMap model, HttpServletRequest request) {
		//获取设置区(县)数据
		try {
			name = new String(name.getBytes("iso-8859-1"),"utf-8");
			mac= request.getSession().getAttribute("mac").toString();
			String urlStr=host+"saveRegion?name="+name+"&phone="+phone+"&macId="+mac+"&id="+id;
			java.net.URL url = new java.net.URL(urlStr);
			java.net.URLConnection connection = url.openConnection();
		    connection.setDoOutput(true);  
		    java.io.OutputStreamWriter outs = new java.io.OutputStreamWriter(connection.getOutputStream(), "8859_1");
		    outs.flush();  
		    outs.close(); 
		    String sCurrentLine;  
		    sCurrentLine = "";  
		    String sTotalString = "";  
		    java.io.InputStream l_urlStream;  
		    l_urlStream = connection.getInputStream();  
		    java.io.BufferedReader l_reader = new java.io.BufferedReader(new java.io.InputStreamReader(l_urlStream));  
		    while ((sCurrentLine = l_reader.readLine()) != null) {  
		        sTotalString += sCurrentLine;  
		    }
		    model.addAttribute("data",sTotalString.replace("\\n", "<br>"));
		    //记录bi日志
		    //bi日志类型 1(page), 2(func), 3(item)
			String biType=request.getParameter("biType");
			String pageId=request.getParameter("pageId");
			String itemId=request.getParameter("itemId");
			String itemType=request.getParameter("itemType");
			String funcId=request.getParameter("funcId");
			String funcContent=request.getParameter("funcContent");
			if(funcId==null){
				funcId="";
			}
			if(funcContent==null){
				funcContent="";
			}
			writeBi(biType, pageId, funcId, funcContent, mac, itemId, itemType, urlStr);
		    //return sTotalString.replace("\\n", "<br>");
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return SUCCESS;
	}
	/**
	 * 保存当前页码信息.
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/savePageIndex", method = RequestMethod.GET)
	public String savePageIndex(@RequestParam(value="pageIndex", required=true) String pageIndex,
			ModelMap model, HttpServletRequest request) {
		request.getSession().setAttribute("pageIndex", pageIndex);
		
		return SUCCESS;
	}
	/**
	 * 获取当前页码信息.
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/getPageIndex", method = RequestMethod.GET)
	public String getPageIndex(ModelMap model, HttpServletRequest request) {
		Object pageIndex = request.getSession().getAttribute("pageIndex");
		if(pageIndex!=null){
			model.addAttribute("data",pageIndex);
		}
		else{
			model.addAttribute("data","-1");
		}
		
		return SUCCESS;
	}
	
	/**
	 * 记录bi日志
	 * @param biType
	 * @param pageId
	 * @param funcId
	 * @param funcContent
	 * @param mac
	 * @param itemId
	 * @param itemType
	 * @param urlStr
	 */
	private void writeBi(String biType,String pageId,String funcId,String funcContent,String mac,String itemId,String itemType, String urlStr){
		try{
			String log="";
			if(biType!=null){
				if(biType.equals("1")){
					log+="biType=1|pageid="+pageId+"|mac="+mac;
				}
				else if(biType.equals("2")){
					log+="biType=2|pageid="+pageId+"|funcid="+funcId+"|funcContent="+funcContent+"|mac="+mac;
				}
				else if(biType.equals("3")){
					log+="biType=3|pageid="+pageId+"|funcid="+funcId+"|itemid="+itemId+"|itemtype="+itemType+"|mac="+mac;
				}
			}
			else{
				log+="biType=null|urlStr="+urlStr+"|mac="+mac;
			}
			if(!log.isEmpty()){
				EpgLogFactory.getBiLogger().info(log);
				System.out.println(log);
			}
		}
		catch(Exception e){
			
		}
	}

	/**
	 * 保存设置信息.
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/getTwoCode", method = RequestMethod.GET)
	public String getTwoCode(@RequestParam(value="url", required=true) String content,
			ModelMap model, HttpServletRequest request) {
		BufferedImage bufImg = null;
		try {
			int size=7;
			com.swetake.util.Qrcode qrcodeHandler = new com.swetake.util.Qrcode();
			// 设置二维码排错率，可选L(7%)、M(15%)、Q(25%)、H(30%)，排错率越高可存储的信息越少，但对二维码清晰度的要求越小
			qrcodeHandler.setQrcodeErrorCorrect('M');
			qrcodeHandler.setQrcodeEncodeMode('B');
			// 设置设置二维码尺寸，取值范围1-40，值越大尺寸越大，可存储的信息越大
			qrcodeHandler.setQrcodeVersion(size);
			// 获得内容的字节数组，设置编码格式
			byte[] contentBytes = content.getBytes("utf-8");
			// 图片尺寸
			int imgSize = 67 + 12 * (size - 1);
			bufImg = new BufferedImage(imgSize, imgSize, BufferedImage.TYPE_INT_RGB);
			Graphics2D gs = bufImg.createGraphics();
			// 设置背景颜色
			gs.setBackground(Color.WHITE);
			gs.clearRect(0, 0, imgSize, imgSize);

			// 设定图像颜色> BLACK
			gs.setColor(Color.BLACK);
			// 设置偏移量，不设置可能导致解析出错
			int pixoff = 2;
			// 输出内容> 二维码
			if (contentBytes.length > 0 && contentBytes.length < 800) {
				boolean[][] codeOut = qrcodeHandler.calQrcode(contentBytes);
				for (int i = 0; i < codeOut.length; i++) {
					for (int j = 0; j < codeOut.length; j++) {
						if (codeOut[j][i]) {
							gs.fillRect(j * 3 + pixoff, i * 3 + pixoff, 3, 3);
						}
					}
				}
			} else {
				throw new Exception("QRCode content bytes length = " + contentBytes.length + " not in [0, 800].");
			}
			gs.dispose();
			bufImg.flush();
			
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write(bufImg, "png", baos);
			byte[] bytes = baos.toByteArray();
			BASE64Encoder encoder = new BASE64Encoder();  
			String base64str = encoder.encodeBuffer(bytes).trim();
			model.addAttribute("data", base64str);
			//return base64str;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}
}
